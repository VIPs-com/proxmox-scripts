#!/usr/bin/env bash

# üöÄ Script P√≥s-Instala√ß√£o Proxmox VE 8 - Cluster Aurora/Luna (V.1.1.5 - Foco no Essencial e Usabilidade)
# Este script DEVE SER EXECUTADO INDIVIDUALMENTE em cada n√≥ do cluster Proxmox.

# ‚úÖ Verifique ANTES de executar:
# 1. Voc√™ j√° criou o cluster via WebUI? (Datacenter > Cluster > Create)
# 2. Todos os n√≥s est√£o acess√≠veis via ping?
# 3. Tem backup dos dados importantes?

#
#
# ‚úÖ Instru√ß√µes de uso local (alternativa ao m√©todo com 'curl'):
#
#    1. Transfira este script para o seu n√≥ Proxmox (via WebUI Shell, pendrive, scp, etc.).
#       Exemplo via SCP (executado do seu computador local):
#       scp /caminho/do/seu/script/post-install.sh root@IP_DO_PROXMOX:/root/post-install.sh
#
#    2. Torne o script execut√°vel no servidor Proxmox:
#       chmod +x /root/post-install.sh
#
#    3. Execute o script como usu√°rio root (no servidor Proxmox):
#       /root/post-install.sh
#       OU
#       bash /root/post-install.sh
#
#
#
# üîπ VLANs Utilizadas:
#    - 172.20.220.0/24 (Home Lab - Rede principal para comunica√ß√£o do cluster)
#    - 172.21.221.0/24 (Rede Interna - Gerenciamento)
#    - 172.25.125.0/24 (Wi-Fi Arkadia)


# üõ†Ô∏è Configura√ß√µes Essenciais - Podem ser sobrescritas por /etc/proxmox-postinstall.conf
CLUSTER_NETWORK="172.20.220.0/24" # Rede para comunica√ß√£o interna do cluster (Corosync, pve-cluster)
NODE_NAME=$(hostname)             # Nome do servidor atual
TIMEZONE="America/Sao_Paulo"     # Fuso hor√°rio do sistema

# IPs e Hostnames de TODOS os n√≥s do cluster.
# Adicione TODOS os pares "IP Hostname" dos seus n√≥s aqui.
# Isso √© crucial para a configura√ß√£o correta do /etc/hosts e testes de conectividade.
# Exemplo: Se seus n√≥s s√£o 172.20.220.20 (aurora) e 172.20.220.21 (luna):
CLUSTER_NODES_CONFIG=("172.20.220.20 aurora" "172.20.220.21 luna")

LOG_FILE="/var/log/proxmox-postinstall-$(date +%Y%m%d)-$(hostname).log" # Arquivo de log espec√≠fico por n√≥
LOCK_FILE="/etc/proxmox-postinstall.lock" # Garante que o script n√£o seja executado m√∫ltiplas vezes
START_TIME=$(date +%s)            # In√≠cio do registro de tempo de execu√ß√£o

# --- INSTRU√á√ïES DE EXECU√á√ÉO ---
#
# üìå M√©todo Recomendado: Via WebUI (para cada n√≥):
#    1. Acesse o Proxmox WebUI em cada host (ex: Aurora: https://172.20.220.20:8006, Luna: https://172.20.220.21:8006).
#    2. V√° at√© a se√ß√£o "**Shell**" de cada n√≥.
#    3. Execute o comando: `curl -sL SEU_URL_DO_SCRIPT/post-install.sh | bash`
#       (Substitua `SEU_URL_DO_SCRIPT` pelo endere√ßo onde voc√™ hospedou este script.
#        Ex: `https://raw.githubusercontent.com/seuusuario/seurepositorio/main/post-install.sh`)
#
# üìå M√©todo Alternativo: Via SSH (para cada n√≥):
#    1. Conecte-se via SSH a cada n√≥ individualmente (ex: `ssh root@172.20.220.20`, depois `ssh root@172.20.220.21`).
#    2. Execute o comando: `curl -sL SEU_URL_DO_SCRIPT/post-install.sh | bash`
#       (ATEN√á√ÉO: Se aplicar o "Hardening SSH" no final do script, o login de root por senha ser√° desabilitado. Voc√™ precisar√° de chaves SSH para futuros acessos ao root.)

# --- FUN√á√ïES AUXILIARES ---

# Fun√ß√µes de Log
log_info() { echo -e "\n‚ÑπÔ∏è $*" | tee -a "$LOG_FILE"; }
log_ok() { echo -e "\n‚úÖ $*" | tee -a "$LOG_FILE"; } # Adicionado para mensagens de sucesso
log_erro() { echo -e "\n‚ùå **ERRO**: $*" | tee -a "$LOG_FILE"; } # Adicionado para mensagens de erro (n√£o cr√≠ticas para abortar)

log_cmd() {
    echo -e "\nüîπ Executando Comando: $*" | tee -a "<span class="math-inline">LOG\_FILE"
eval "</span>@" >> "<span class="math-inline">LOG\_FILE" 2\>&1
local status\=</span>?
    if [ $status -ne 0 ]; then
        echo "‚ùå **ERRO CR√çTICO** [$status]: Falha ao executar o comando: $*" | tee -a "$LOG_FILE"
        echo "O script ser√° encerrado. Verifique o log em $LOG_FILE para mais detalhes." | tee -a "$LOG_FILE"
        exit $status
    fi
    return $status
}

# Fun√ß√£o para fazer backup de arquivos
backup_file() {
    local file="$1"
    if [ -f "$file" ]; then
        local backup_dir="/var/backups/proxmox-postinstall"
        mkdir -p "<span class="math-inline">backup\_dir"
local timestamp\=</span>(date +%Y%m%d%H%M%S)
        local backup_path="<span class="math-inline">backup\_dir/</span>(basename "<span class="math-inline">file"\)\.</span>{timestamp}"
        log_info "üì¶ Fazendo backup de '$file' para '$backup_path'..."
        cp -p "$file" "$backup_path" >> "$LOG_FILE" 2>&1
        if [ $? -ne 0 ]; then
            log_info "‚ö†Ô∏è **AVISO**: Falha ao criar backup de '$file'. Continue com cautela."
        else
            log_info "‚úÖ Backup de '$file' criado com sucesso."
        fi
    else
        log_info "‚ÑπÔ∏è Arquivo '$file' n√£o encontrado, nenhum backup necess√°rio."
    fi
}

# Fun√ß√£o para validar IP
validate_ip() {
    local ip="$1"
    if ! [[ "<span class="math-inline">ip" \=\~ ^\[0\-9\]\{1,3\}\\\.\[0\-9\]\{1,3\}\\\.\[0\-9\]\{1,3\}\\\.\[0\-9\]\{1,3\}</span> ]]; then
        log_erro "IP '<span class="math-inline">ip' inv√°lido\. Use formato 'XXX\.XXX\.XXX\.XXX'\."
exit 1
fi
\}
\# Nova fun√ß√£o\: Configura entradas em /etc/hosts para os n√≥s do cluster
configurar\_hosts\(\) \{
log\_info "üìù Configurando entradas em /etc/hosts para os n√≥s do cluster\.\.\."
backup\_file "/etc/hosts" \# Faz backup do /etc/hosts antes de modificar
for node\_entry in "</span>{CLUSTER_NODES_CONFIG[@]}"; do
        # Divide a string "IP HOSTNAME" em vari√°veis separadas
        read -r ip hostname <<< "$node_entry"

        # Verifica se o IP √© v√°lido antes de adicionar
        validate_ip "$ip"

        # Verifica se a entrada IP HOSTNAME j√° existe exatamente como queremos
        if ! grep -qE "^$ip\s+<span class="math-inline">hostname\(\\s\+\|</span>)" /etc/hosts; then
            # Se o IP existe mas est√° associado a outro hostname, remove a linha antiga
            if grep -qE "^$ip\s+" /etc/hosts; then
                log_info "Removendo entrada existente para IP '$ip' em /etc/hosts antes de adicionar o hostname correto."
                log_cmd "sed -i '/^$ip\s\+/d' /etc/hosts"
            fi
            log_info "Adicionando entrada: '$ip $hostname' a /etc/hosts."
            log_cmd "echo \"$ip $hostname\" >> /etc/hosts"
        else
            log_info "Entrada '$ip $hostname' j√° existe em /etc/hosts. Pulando."
        fi
    done
    log_ok "‚úÖ Configura√ß√£o de /etc/hosts conclu√≠da."
}


# Fun√ß√£o para exibir ajuda
show_help() {
    echo "Uso: <span class="math-inline">0 \[OP√á√ÉO\]"
echo "Script para p√≥s\-instala√ß√£o e configura√ß√£o inicial de um n√≥ Proxmox VE 8\."
echo ""
echo "Op√ß√µes\:"
echo "  \-h, \-\-help    Mostra esta mensagem de ajuda e sai\."
echo "  \-\-skip\-lock   Ignora a verifica√ß√£o de arquivo de lock, permitindo m√∫ltiplas execu√ß√µes \(N√ÉO RECOMENDADO\)\."
echo ""
echo "Vari√°veis de configura√ß√£o podem ser definidas em /etc/proxmox\-postinstall\.conf"
echo "Se este arquivo n√£o existir, o script tentar√° baix√°\-lo de um reposit√≥rio GitHub\."
echo "Exemplo\: CLUSTER\_NETWORK\=\\"192\.168\.1\.0/24\\""
echo "         CLUSTER\_NODES\_CONFIG\=\(\\"192\.168\.1\.10 node1\\" \\"192\.168\.1\.11 node2\\"\)" \# Atualizado
echo "         TIMEZONE\=\\"America/New\_York\\""
exit 0
\}
\# \-\-\- PROCESSAMENTO DE OP√á√ïES E CARREGAMENTO DE CONFIGURA√á√ÉO EXTERNA \-\-\-
\# Processa op√ß√µes de linha de comando
SKIP\_LOCK\=false
for arg in "</span>@"; do
    case "$arg" in
        -h|--help) show_help ;;
        --skip-lock) SKIP_LOCK=true ;;
        *) log_erro "Op√ß√£o inv√°lida: $arg. Use -h ou --help para ver as op√ß√µes."; exit 1 ;;
    esac
done

# --- DOWNLOAD E CARREGAMENTO DE CONFIGURA√á√ÉO EXTERNA ---
CONFIG_URL="https://raw.githubusercontent.com/VIPs-com/proxmox-scripts/main/etc/proxmox-postinstall.conf"
CONFIG_FILE="/etc/proxmox-postinstall.conf"

# Se o arquivo de configura√ß√£o local n√£o existir, baixa do GitHub
if [[ ! -f "$CONFIG_FILE" ]]; then
    log_info "‚öôÔ∏è Arquivo de configura√ß√£o n√£o encontrado localmente. Tentando baixar do GitHub: $CONFIG_URL..."
    # Usa curl diretamente e captura o status, sem log_cmd para n√£o abortar o script em caso de falha no download
    curl -s -o "$CONFIG_FILE" "$CONFIG_URL"
    if [ $? -eq 0 ] && [ -f "$CONFIG_FILE" ]; then
        log_ok "‚úÖ Configura√ß√£o baixada e salva em $CONFIG_FILE."
    else
        log_erro "Falha ao baixar configura√ß√µes do GitHub! Verifique a URL ou conectividade. Continuando com configura√ß√µes padr√£o do script."
        # Remove qualquer arquivo parcialmente baixado para evitar carregar conte√∫do incompleto
        rm -f "$CONFIG_FILE"
    fi
fi

# Carrega configura√ß√µes do arquivo (local ou rec√©m-baixado)
if [[ -f "$CONFIG_FILE" ]]; then
    log_info "‚öôÔ∏è Carregando configura√ß√µes de $CONFIG_FILE..."
    # Garante que as vari√°veis sejam carregadas para o shell atual
    source "$CONFIG_FILE"
    log_ok "‚úÖ Configura√ß√µes carregadas com sucesso!"
else
    log_info "‚ÑπÔ∏è Arquivo de configura√ß√£o $CONFIG_FILE n√£o encontrado. Usando configura√ß√µes padr√£o do script."
fi

# --- IN√çCIO DA EXECU√á√ÉO DO SCRIPT ---

# üîí Preven√ß√£o de M√∫ltiplas Execu√ß√µes
if [ "$SKIP_LOCK" = false ] && [ -f "$LOCK_FILE" ]; then
    log_erro "O script j√° foi executado anteriormente neste n√≥ ($NODE_NAME). Abortando para evitar configura√ß√µes duplicadas."
    log_info "Se voc√™ realmente precisa re-executar, remova '$LOCK_FILE' ou use '--skip-lock' (N√ÉO RECOMENDADO)."
    exit 1
fi
touch "$LOCK_FILE" # Cria o arquivo de lock

log_info "üìÖ **IN√çCIO**: Execu√ß√£o do script de p√≥s-instala√ß√£o no n√≥ **$NODE_NAME** em $(date)"

# --- Fase 1: Verifica√ß√µes Iniciais e Valida√ß√£o de Entrada ---

log_info "üîç Verificando depend√™ncias essenciais do sistema (curl, ping, nc)..."
check_dependency() {
    local cmd="$1"
    if ! command -v "$cmd" &>/dev/null; then
        log_erro "O comando '$cmd' n√£o foi encontrado. Por favor, instale-o (ex: apt install -y $cmd) e re-execute o script."
        exit 1
    fi
    log_info "‚úÖ Depend√™ncia '<span class="math-inline">cmd' verificada\."
\}
check\_dependency "curl"
check\_dependency "ping"
check\_dependency "nc" \# Netcat, usado para os testes de porta \(apt install \-y netcat\-traditional ou netcat\-openbsd\)
\# Chama a nova fun√ß√£o para configurar o /etc/hosts
configurar\_hosts
log\_info "üîç Validando formato dos IPs e m√°scara de rede\.\.\."
\# Validar cada IP dos n√≥s do cluster
for node\_entry in "</span>{CLUSTER_NODES_CONFIG[@]}"; do
    read -r ip hostname <<< "$node_entry"
    validate_ip "$ip"
done
log_info "‚úÖ Formato dos IPs em CLUSTER_NODES_CONFIG verificado."

# Validar formato da rede (ex: 172.20.220.0/24)
if ! [[ "<span class="math-inline">CLUSTER\_NETWORK" \=\~ ^\[0\-9\]\{1,3\}\\\.\[0\-9\]\{1,3\}\\\.\[0\-9\]\{1,3\}\\\.\[0\-9\]\{1,3\}/\[0\-9\]\{1,2\}</span> ]]; then
    log_erro "Formato de rede inv√°lido em CLUSTER_NETWORK. Use 'IP/MASK' (ex: 172.20.220.0/24)."
    exit 1
fi
log_info "‚úÖ Formato de CLUSTER_NETWORK verificado."

log_info "üîç Verificando conectividade de rede com os reposit√≥rios Debian..."
ping -c 4 ftp.debian.org &>/dev/null
if [ <span class="math-inline">? \-ne 0 \]; then
log\_info "‚ö†Ô∏è \*\*AVISO\*\*\: N√£o foi poss√≠vel pingar 'ftp\.debian\.org'\. A conectividade com a internet pode estar comprometida\. As atualiza√ß√µes e instala√ß√µes podem falhar\."
else
log\_info "‚úÖ Conectividade com reposit√≥rios Debian OK\."
fi
log\_info "üîç Verificando a vers√£o do Proxmox VE\.\.\."
PVE\_VERSION\=</span>(pveversion | grep -oP 'pve-manager/\K\d+\.\d+') # Extrai "8.x"
REQUIRED_MAJOR_VERSION=8

if (( $(echo "$PVE_VERSION" | cut -d'.' -f1) < $REQUIRED_MAJOR_VERSION )); then
    log_erro "Este script requer Proxmox VE vers√£o $REQUIRED_MAJOR_VERSION.x ou superior. Vers√£o atual detectada: $PVE_VERSION. N√£o √© compat√≠vel."
    exit 1
elif (( $(echo "$PVE_VERSION" | cut -d'.' -f1) > $REQUIRED_MAJOR_VERSION )); then
    log_info "‚ö†Ô∏è **AVISO**: Este script foi testado para Proxmox VE $REQUIRED_MAJOR_VERSION.x. Vers√£o <span class="math-inline">PVE\_VERSION pode requerer ajustes ou n√£o ser totalmente compat√≠vel\."
read \-p "Continuar mesmo assim? \[s/N\] " \-n 1 \-r \-t 10
echo \# Nova linha ap√≥s a resposta do usu√°rio
REPLY\=</span>{REPLY:-N}
    [[ ! <span class="math-inline">REPLY \=\~ ^\[Ss\]</span> ]] && { log_info "Script abortado pelo usu√°rio."; exit 0; }
else
    log_info "‚úÖ Vers√£o do Proxmox VE (<span class="math-inline">PVE\_VERSION\) compat√≠vel\."
fi
log\_info "üîç Verificando recursos de hardware b√°sicos\.\.\."
MIN\_RAM\_GB\=4 \# M√≠nimo recomendado de RAM em GB para um n√≥ Proxmox VE
RAM\_AVAILABLE\_GB\=</span>(free -g | awk '/Mem:/ {print $2}')
if (( RAM_AVAILABLE_GB < MIN_RAM_GB )); then
    log_info "‚ö†Ô∏è **AVISO**: Pouca RAM detectada ($RAM_AVAILABLE_GB GB). M√≠nimo recomendado para Proxmox VE √© $MIN_RAM_GB GB. O desempenho pode ser afetado."
else
    log_info "‚úÖ RAM dispon√≠vel ($RAM_AVAILABLE_GB GB) OK."
fi
# Adicione mais checks aqui (CPU, disco, etc.) se desejar

# --- Fase 2: Configura√ß√£o de Tempo e NTP ---

log_info "‚è∞ Configurando fuso hor√°rio para **$TIMEZONE** e sincroniza√ß√£o NTP..."

# Adicionado: Verifica√ß√£o de conectividade NTP inicial
log_info "üîç Verificando conectividade com servidores NTP externos (pool.ntp.org:123/UDP)..."
if ! nc -zvu pool.ntp.org 123 &>/dev/null; then
    log_erro "Falha na conex√£o com pool.ntp.org na porta 123 (UDP). Verifique conectividade externa e regras de firewall para NTP."
else
    log_ok "‚úÖ Conectividade NTP externa OK."
fi

log_cmd "timedatectl set-timezone $TIMEZONE"
log_cmd "timedatectl set-ntp true" # Habilita o systemd-timesyncd
log_cmd "systemctl restart systemd-timesyncd" # Garante que o servi√ßo esteja rodando

log_info "Aguardando e verificando a sincroniza√ß√£o NTP inicial..."
timeout 15 bash -c 'while ! timedatectl status | grep -q "System clock synchronized: yes"; do sleep 1; done'
if [ $? -ne 0 ]; then
    log_info "‚ö†Ô∏è **AVISO**: Falha na sincroniza√ß√£o NTP ap√≥s 15 segundos! Tentando corre√ß√£o alternativa com ntpdate..."
    # Garante que ntpdate esteja instalado antes de us√°-lo
    command -v ntpdate &>/dev/null || log_cmd "apt install -y ntpdate"
    # Tenta sincronizar com ntpdate e registra qualquer erro, com m√∫ltiplos fallbacks
    ntpdate -s pool.ntp.org >> "$LOG_FILE" 2>&1 \
    || ntpdate -s 0.pool.ntp.org >> "$LOG_FILE" 2>&1 \
    || ntpdate -s 1.pool.ntp.org >> "<span class="math-inline">LOG\_FILE" 2\>&1 \\
\|\| log\_erro 'Falha grave ao sincronizar com ntpdate ap√≥s v√°rias tentativas\. Verifique a conectividade de rede e as configura√ß√µes de NTP\.'
else
log\_info "‚úÖ Sincroniza√ß√£o NTP bem\-sucedida\."
fi
\# \-\-\- Fase 3\: Gerenciamento de Reposit√≥rios e Atualiza√ß√µes \-\-\-
log\_info "üóëÔ∏è Desabilitando reposit√≥rio de subscri√ß√£o e habilitando reposit√≥rio PVE no\-subscription\.\.\."
\# Fa√ßa backup de arquivos de lista de apt antes de modificar
backup\_file "/etc/apt/sources\.list\.d/pve\-enterprise\.list"
backup\_file "/etc/apt/sources\.list"
backup\_file "/etc/apt/sources\.list\.d/pve\-no\-subscription\.list"
\# CORRE√á√ÉO\: Verifica se o arquivo existe antes de tentar modific√°\-lo
if \[ \-f "/etc/apt/sources\.list\.d/pve\-enterprise\.list" \]; then
log\_info "Comentando a linha do pve\-enterprise\.list para desabilitar o reposit√≥rio de subscri√ß√£o\."
log\_cmd "sed \-i 's/^deb/\#deb/' /etc/apt/sources\.list\.d/pve\-enterprise\.list"
else
log\_info "‚ÑπÔ∏è Arquivo /etc/apt/sources\.list\.d/pve\-enterprise\.list n√£o encontrado\. Nenhuma a√ß√£o necess√°ria para desabilitar o reposit√≥rio de subscri√ß√£o\."
fi
\# Adiciona/sobrescreve os reposit√≥rios Debian padr√£o
log\_cmd "echo 'deb http\://ftp\.debian\.org/debian bookworm main contrib' \> /etc/apt/sources\.list"
log\_cmd "echo 'deb http\://ftp\.debian\.org/debian bookworm\-updates main contrib' \>\> /etc/apt/sources\.list"
log\_cmd "echo 'deb http\://security\.debian\.org/debian\-security bookworm\-security main contrib' \>\> /etc/apt/sources\.list"
\# Adiciona o reposit√≥rio Proxmox VE "no\-subscription"
log\_cmd "echo 'deb http\://download\.proxmox\.com/debian/pve bookworm pve\-no\-subscription' \> /etc/apt/sources\.list\.d/pve\-no\-subscription\.list"
log\_info "üîÑ Atualizando listas de pacotes e o sistema operacional\.\.\."
log\_cmd "apt update"
log\_cmd "apt dist\-upgrade \-y"   \# Atualiza todos os pacotes e resolve depend√™ncias
log\_cmd "apt autoremove \-y"     \# Remove pacotes √≥rf√£os
log\_cmd "apt clean"             \# Limpa o cache de pacotes
log\_info "üßπ Removendo o aviso de assinatura Proxmox VE do WebUI \(se n√£o possuir uma licen√ßa ativa\)\.\.\."
\# Cria um hook para APT que modifica o arquivo JS do WebUI
log\_cmd "echo \\"DPkg\:\:Post\-Invoke \{ \\\\\\"dpkg \-V proxmox\-widget\-toolkit \| grep \-q '/proxmoxlib\.js</span>'; if [ \\\$? -eq 1 ]; then sed -i '/.*data.status.*{/{s/\\!//;s/active/NoMoreNagging/}' /usr/share/javascript/proxmox-widget-toolkit/proxmoxlib.js; fi\\\"; };\" > /etc/apt/apt.conf.d/no-nag-script"
# Reinstala o pacote para aplicar a modifica√ß√£o imediatamente (ou ap√≥s futuras atualiza√ß√µes do pacote)
log_cmd "apt --reinstall install -y proxmox-widget-toolkit"
log_info "‚úÖ Aviso de assinatura removido do WebUI (se aplic√°vel).."

# --- Fase 4: Configura√ß√£o de Firewall ---

log_info "üîç Verificando portas cr√≠ticas em uso antes de configurar o firewall..."
# Lista de portas essenciais para Proxmox e cluster
CRITICAL_PORTS="8006 22 5404 5405 2224"
for port in $CRITICAL_PORTS; do
    if ss -tuln | grep -q ":$port "; then
        log_info "‚ö†Ô∏è **AVISO**: Porta TCP/UDP **$port** j√° est√° em uso! Verifique se isso n√£o conflitar√° com as regras do firewall Proxmox. Se estiver em uso pelo Proxmox ou Corosync, isso √© normal."
    fi
done
log_info "‚úÖ Verifica√ß√£o de portas conclu√≠da."

log_info "üõ°Ô∏è Configurando o firewall do Proxmox VE com regras espec√≠ficas..."
# REMOVIDO: log_cmd "pve-firewall stop" # ESTA LINHA FOI REMOVIDA DEFINITIVAMENTE!

# Regras para permitir acesso ao WebUI (porta 8006) e SSH (porta 22) apenas das redes locais
log_info "Permitindo acesso ao WebUI (8006) e SSH (22) apenas das redes locais..."
log_cmd "pve-firewall rule --add 172.20.220.0/24 --proto tcp --dport 8006 --accept --comment 'Acesso WebUI Home Lab'"
log_cmd "pve-firewall rule --add 172.21.221.0/24 --proto tcp --dport 8006 --accept --comment 'Acesso WebUI Rede Interna'"
log_cmd "pve-firewall rule --add 172.25.125.0/24 --proto tcp --dport 8006 --accept --comment 'Acesso WebUI Wi-Fi Arkadia'"
log_cmd "pve-firewall rule --add 172.20.220.0/24 --proto tcp --dport 22 --accept --comment 'Acesso SSH Home Lab'"
log_cmd "pve-firewall rule --add 172.21.221.0/24 --proto tcp --dport 22 --accept --comment 'Acesso SSH Rede Interna'"
log_cmd "pve-firewall rule --add 172.25.125.0/24 --proto tcp --dport 22 --accept --comment 'Acesso SSH Wi-Fi Arkadia'"

# Definindo redes locais para serem consideradas seguras pelo firewall (√∫til para VMs com 'firewall=1')
log_info "Configurando 'localnet' para as VLANs internas..."
log_cmd "pve-firewall localnet --add 172.20.220.0/24 --comment 'Home Lab VLAN (comunica√ß√£o cluster)'"
log_cmd "pve-firewall localnet --add 172.21.221.0/24 --comment 'Rede Interna Gerenciamento'"
log_cmd "pve-firewall localnet --add 172.25.125.0/24 --comment 'Wi-Fi Arkadia'"

# CR√çTICO**: Regras para comunica√ß√£o INTERNA DO CLUSTER (Corosync e pve-cluster)
# Essas regras s√£o ABSOLUTAMENTE ESSENCIAIS para que os n√≥s do cluster se comuniquem e funcionem corretamente.
log_info "Permitindo tr√°fego essencial para comunica√ß√£o do cluster (Corosync, pve-cluster) na rede **$CLUSTER_NETWORK**..."
log_cmd "pve-firewall rule --add $CLUSTER