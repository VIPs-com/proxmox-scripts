#!/usr/bin/env bash

# üöÄ Script P√≥s-Instala√ß√£o Proxmox VE 8 - Cluster Aurora/Luna (V.1.1.16 - Firewall Separado)
# Este script DEVE SER EXECUTADO INDIVIDUALMENTE em cada n√≥ do cluster Proxmox.
# A configura√ß√£o do Firewall agora est√° em um script separado: proxmox-firewall-config.sh

# ‚úÖ Verifique ANTES de executar:
# 1. Voc√™ j√° criou o cluster via WebUI? (Datacenter > Cluster > Create)
# 2. Todos os n√≥s est√£o acess√≠veis via ping?
# 3. Tem backup dos dados importantes?

#
#
# ‚úÖ Instru√ß√µes de uso local (alternativa ao m√©todo com 'curl'):
#
#    1. Transfira este script para o seu n√≥ Proxmox (via WebUI Shell, pendrive, scp, etc.).
#       Exemplo via SCP (executado do seu computador local):
#       scp /caminho/do/seu/script/post-install.sh root@IP_DO_PROXMOX:/root/post-install.sh
#
#    2. Torne o script execut√°vel no servidor Proxmox:
#       chmod +x /root/post-install.sh
#
#    3. Execute o script como usu√°rio root (no servidor Proxmox):
#       /root/post-install.sh
#       OU
#       bash /root/post-install.sh
#
#
#
# üîπ VLANs Utilizadas (para refer√™ncia, n√£o configuradas diretamente aqui):
#    - 172.20.220.0/24 (Home Lab - Rede principal para comunica√ß√£o do cluster)
#    - 172.21.221.0/24 (Rede Interna - Gerenciamento)
#    - 172.25.125.0/24 (Wi-Fi Arkadia)


# üõ†Ô∏è Configura√ß√µes Essenciais - Podem ser sobrescritas por /etc/proxmox-postinstall.conf
CLUSTER_NETWORK="172.20.220.0/24" # Rede para comunica√ß√£o interna do cluster (Corosync, pve-cluster)
NODE_NAME=$(hostname)             # Nome do servidor atual
TIMEZONE="America/Sao_Paulo"     # Fuso hor√°rio do sistema

# IPs de outros n√≥s do cluster para testes de conectividade.
# Adicione TODOS os IPs dos seus n√≥s aqui. O script ignorar√° o IP do pr√≥prio n√≥ durante o teste.
# Exemplo: Se seus n√≥s s√£o 172.20.220.20 (Aurora) e 172.20.220.21 (Luna):
CLUSTER_PEER_IPS=("172.20.220.20" "172.20.220.21")

LOG_FILE="/var/log/proxmox-postinstall-$(date +%Y%m%d)-$(hostname).log" # Arquivo de log espec√≠fico por n√≥
LOCK_FILE="/etc/proxmox-postinstall.lock" # Garante que o script n√£o seja executado m√∫ltiplas vezes
START_TIME=$(date +%s)            # In√≠cio do registro de tempo de execu√ß√£o

# --- INSTRU√á√ïES DE EXECU√á√ÉO ---

# üìå M√©todo Recomendado: Via WebUI (para cada n√≥):
#    1. Acesse o Proxmox WebUI em cada host (ex: Aurora: https://172.20.220.20:8006, Luna: https://172.20.220.21:8006).
#    2. V√° at√© a se√ß√£o "**Shell**" de cada n√≥.
#    3. Execute o comando: `curl -sL SEU_URL_DO_SCRIPT/post-install.sh | bash`
#       (Substitua `SEU_URL_DO_SCRIPT` pelo endere√ßo onde voc√™ hospedou este script.
#        Ex: `https://raw.githubusercontent.com/seuusuario/seurepositorio/main/post-install.sh`)
#
# üìå M√©todo Alternativo: Via SSH (para cada n√≥):
#    1. Conecte-se via SSH a cada n√≥ individualmente (ex: `ssh root@172.20.220.20`, depois `ssh root@172.20.220.21`).
#    2. Execute o comando: `curl -sL SEU_URL_DO_SCRIPT/post-install.sh | bash`
#       (ATEN√á√ÉO: Se aplicar o "Hardening SSH" no final do script, o login de root por senha ser√° desabilitado. Voc√™ precisar√° de chaves SSH para futuros acessos ao root.)

# --- FUN√á√ïES AUXILIARES ---

# Fun√ß√µes de Log
log_info() { echo -e "\n‚ÑπÔ∏è $*" | tee -a "$LOG_FILE"; }
log_ok() { echo -e "\n‚úÖ $*" | tee -a "$LOG_FILE"; } # Adicionado para mensagens de sucesso
log_erro() { echo -e "\n‚ùå **ERRO**: $*" | tee -a "$LOG_FILE"; } # Adicionado para mensagens de erro (n√£o cr√≠ticas para abortar)

log_cmd() {
    echo -e "\nüîπ Executando Comando: $*" | tee -a "$LOG_FILE"
    eval "$@" >> "$LOG_FILE" 2>&1
    local status=$?
    if [ $status -ne 0 ]; then
        echo "‚ùå **ERRO CR√çTICO** [$status]: Falha ao executar o comando: $*" | tee -a "$LOG_FILE"
        echo "O script ser√° encerrado. Verifique o log em $LOG_FILE para mais detalhes." | tee -a "$LOG_FILE"
        exit $status
    fi
    return $status
}

# Fun√ß√£o para fazer backup de arquivos
backup_file() {
    local file="$1"
    if [ -f "$file" ]; then
        local backup_dir="/var/backups/proxmox-postinstall"
        mkdir -p "$backup_dir"
        local timestamp=$(date +%Y%m%d%H%M%S)
        local backup_path="$backup_dir/$(basename "$file").${timestamp}"
        log_info "üì¶ Fazendo backup de '$file' para '$backup_path'..."
        cp -p "$file" "$backup_path" >> "$LOG_FILE" 2>&1
        if [ $? -ne 0 ]; then
            log_info "‚ö†Ô∏è **AVISO**: Falha ao criar backup de '$file'. Continue com cautela."
        else
            log_info "‚úÖ Backup de '$file' criado com sucesso."
        fi
    else
        log_info "‚ÑπÔ∏è Arquivo '$file' n√£o encontrado, nenhum backup necess√°rio."
    fi
}

# Fun√ß√£o para validar IP
validate_ip() {
    local ip="$1"
    if ! [[ "$ip" =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
        log_erro "IP '$ip' inv√°lido. Use formato 'XXX.XXX.XXX.XXX'."
        exit 1
    fi
}

# Configura entradas em /etc/hosts para os n√≥s do cluster
configurar_hosts() {
    log_info "üìù Configurando entradas em /etc/hosts para os n√≥s do cluster..."
    backup_file "/etc/hosts" # Faz backup do /etc/hosts antes de modificar

    local current_ip=$(hostname -I | awk '{print $1}') # Pega o primeiro IP do n√≥ atual
    local current_hostname=$(hostname)

    # Adiciona o pr√≥prio n√≥
    if ! grep -qE "^$current_ip\s+$current_hostname(\s+|$)" /etc/hosts; then
        if grep -qE "^$current_ip\s+" /etc/hosts; then
            log_info "Removendo entrada existente para IP '$current_ip' em /etc/hosts antes de adicionar o hostname correto."
            log_cmd "sed -i '/^$current_ip\s\+/d' /etc/hosts"
        fi
        log_info "Adicionando entrada: '$current_ip $current_hostname' a /etc/hosts."
        log_cmd "echo \"$current_ip $current_hostname\" >> /etc/hosts"
    else
        log_info "Entrada '$current_ip $current_hostname' j√° existe em /etc/hosts. Pulando."
    fi

    # Adiciona os IPs dos pares (sem hostname, pois CLUSTER_PEER_IPS n√£o os cont√©m)
    # Para um ambiente de cluster, √© ALTAMENTE recomendado que todos os n√≥s tenham os hostnames dos outros n√≥s em /etc/hosts ou via DNS.
    # Como CLUSTER_PEER_IPS s√≥ tem IPs, vamos adicionar apenas os IPs para garantir a resolu√ß√£o b√°sica.
    for peer_ip in "${CLUSTER_PEER_IPS[@]}"; do
        if [ "$peer_ip" = "$current_ip" ]; then
            continue # N√£o adiciona o pr√≥prio IP novamente
        fi
        if ! grep -qE "^$peer_ip\s+" /etc/hosts; then # Verifica se o IP j√° existe
            log_info "Adicionando entrada para IP de peer: '$peer_ip' a /etc/hosts (sem hostname, pois n√£o est√° dispon√≠vel)."
            log_cmd "echo \"$peer_ip\" >> /etc/hosts" # Adiciona apenas o IP
        else
            log_info "Entrada para IP de peer '$peer_ip' j√° existe em /etc/hosts. Pulando."
        fi
    done
    log_ok "‚úÖ Configura√ß√£o de /etc/hosts conclu√≠da."
}


# Fun√ß√£o para exibir ajuda
show_help() {
    echo "Uso: $0 [OP√á√ÉO]"
    echo "Script para p√≥s-instala√ß√£o e configura√ß√£o inicial de um n√≥ Proxmox VE."
    echo ""
    echo "Op√ß√µes:"
    echo "  -h, --help    Mostra esta mensagem de ajuda e sai."
    echo "  --skip-lock   Ignora a verifica√ß√£o de arquivo de lock, permitindo m√∫ltiplas execu√ß√µes (N√ÉO RECOMENDADO)."
    echo ""
    echo "Vari√°veis de configura√ß√£o podem ser definidas em /etc/proxmox-postinstall.conf"
    echo "Exemplo: CLUSTER_NETWORK=\"192.168.1.0/24\""
    echo "         CLUSTER_PEER_IPS=(\"192.168.1.10\" \"192.168.1.11\")"
    echo "         TIMEZONE=\"America/New_York\""
    exit 0
}

# --- PROCESSAMENTO DE OP√á√ïES E CARREGAMENTO DE CONFIGURA√á√ÉO EXTERNA ---

# Processa op√ß√µes de linha de comando
SKIP_LOCK=false
for arg in "$@"; do
    case "$arg" in
        -h|--help) show_help ;;
        --skip-lock) SKIP_LOCK=true ;;
        *) log_erro "Op√ß√£o inv√°lida: $arg. Use -h ou --help para ver as op√ß√µes."; exit 1 ;;
    esac
done

# --- DOWNLOAD E CARREGAMENTO DE CONFIGURA√á√ÉO EXTERNA ---
CONFIG_URL="https://raw.githubusercontent.com/VIPs-com/proxmox-scripts/main/etc/proxmox-postinstall.conf"
CONFIG_FILE="/etc/proxmox-postinstall.conf"

# Se o arquivo de configura√ß√£o local n√£o existir, baixa do GitHub
if [[ ! -f "$CONFIG_FILE" ]]; then
    log_info "‚öôÔ∏è Arquivo de configura√ß√£o n√£o encontrado localmente. Tentando baixar do GitHub: $CONFIG_URL..."
    # Usa curl diretamente e captura o status, sem log_cmd para n√£o abortar o script em caso de falha no download
    curl -s -o "$CONFIG_FILE" "$CONFIG_URL"
    if [ $? -eq 0 ] && [ -f "$CONFIG_FILE" ]; then
        log_ok "‚úÖ Configura√ß√£o baixada e salva em $CONFIG_FILE."
    else
        log_erro "Falha ao baixar configura√ß√µes do GitHub! Verifique a URL ou conectividade. Continuando com configura√ß√µes padr√£o do script."
        # Remove qualquer arquivo parcialmente baixado para evitar carregar conte√∫do incompleto
        rm -f "$CONFIG_FILE"
    fi
fi

# Carrega configura√ß√µes do arquivo (local ou rec√©m-baixado)
if [[ -f "$CONFIG_FILE" ]]; then
    log_info "‚öôÔ∏è Carregando configura√ß√µes de $CONFIG_FILE..."
    # Garante que as vari√°veis sejam carregadas para o shell atual
    source "$CONFIG_FILE"
    log_ok "‚úÖ Configura√ß√µes carregadas com sucesso!"
else
    log_info "‚ÑπÔ∏è Arquivo de configura√ß√£o $CONFIG_FILE n√£o encontrado. Usando configura√ß√µes padr√£o do script."
fi

# --- IN√çCIO DA EXECU√á√ÉO DO SCRIPT ---

# üîí Preven√ß√£o de M√∫ltiplas Execu√ß√µes
if [[ "$SKIP_LOCK" == "false" && -f "$LOCK_FILE" ]]; then
    log_erro "O script j√° foi executado anteriormente neste n√≥ ($NODE_NAME). Abortando para evitar configura√ß√µes duplicadas."
    log_info "Se voc√™ realmente precisa re-executar, remova '$LOCK_FILE' ou use '--skip-lock' (N√ÉO RECOMENDADO)."
    exit 1
fi
touch "$LOCK_FILE" # Cria o arquivo de lock

log_info "üìÖ **IN√çCIO**: Execu√ß√£o do script de p√≥s-instala√ß√£o no n√≥ **$NODE_NAME** em $(date)"

# --- Fase 1: Verifica√ß√µes Iniciais e Valida√ß√£o de Entrada ---

log_info "üîç Verificando depend√™ncias essenciais do sistema (curl, ping, nc)..."
check_dependency() {
    local cmd="$1"
    if ! command -v "$cmd" &>/dev/null; then
        log_erro "O comando '$cmd' n√£o foi encontrado. Por favor, instale-o (ex: apt install -y $cmd) e re-execute o script."
        exit 1
    fi
    log_info "‚úÖ Depend√™ncia '$cmd' verificada."
}
check_dependency "curl"
check_dependency "ping"
check_dependency "nc" # Netcat, usado para os testes de porta (apt install -y netcat-traditional ou netcat-openbsd)

# Chama a nova fun√ß√£o para configurar o /etc/hosts
configurar_hosts

log_info "üîç Validando formato dos IPs e m√°scara de rede..."
# Validar cada IP do cluster
for ip in "${CLUSTER_PEER_IPS[@]}"; do
    validate_ip "$ip"
done
log_info "‚úÖ Formato dos IPs em CLUSTER_PEER_IPS verificado."

# Validar formato da rede (ex: 172.20.220.0/24)
if ! [[ "$CLUSTER_NETWORK" =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}/[0-9]{1,2}$ ]]; then
    log_erro "Formato de rede inv√°lido em CLUSTER_NETWORK. Use 'IP/MASK' (ex: 172.20.220.0/24)."
    exit 1
fi
log_info "‚úÖ Formato de CLUSTER_NETWORK verificado."

log_info "üîç Verificando conectividade de rede com os reposit√≥rios Debian..."
ping -c 4 ftp.debian.org &>/dev/null
if [ $? -ne 0 ]; then
    log_info "‚ö†Ô∏è **AVISO**: N√£o foi poss√≠vel pingar 'ftp.debian.org'. A conectividade com a internet pode estar comprometida. As atualiza√ß√µes e instala√ß√µes podem falhar."
else
    log_info "‚úÖ Conectividade com reposit√≥rios Debian OK."
fi

log_info "üîç Verificando a vers√£o do Proxmox VE..."
PVE_VERSION=$(pveversion | grep -oP 'pve-manager/\K\d+\.\d+') # Extrai "8.x"
REQUIRED_MAJOR_VERSION=8

if (( $(echo "$PVE_VERSION" | cut -d'.' -f1) < $REQUIRED_MAJOR_VERSION )); then
    log_erro "Este script requer Proxmox VE vers√£o $REQUIRED_MAJOR_VERSION.x ou superior. Vers√£o atual detectada: $PVE_VERSION. N√£o √© compat√≠vel."
    exit 1
elif (( $(echo "$PVE_VERSION" | cut -d'.' -f1) > $REQUIRED_MAJOR_VERSION )); then
    log_info "‚ö†Ô∏è **AVISO**: Este script foi testado para Proxmox VE $REQUIRED_MAJOR_VERSION.x. Vers√£o $PVE_VERSION pode requerer ajustes ou n√£o ser totalmente compat√≠vel."
    read -p "Continuar mesmo assim? [s/N] " -n 1 -r -t 10
    echo # Nova linha ap√≥s a resposta do usu√°rio
    REPLY=${REPLY:-N}
    [[ ! $REPLY =~ ^[Ss]$ ]] && { log_info "Script abortado pelo usu√°rio."; exit 0; }
else
    log_info "‚úÖ Vers√£o do Proxmox VE ($PVE_VERSION) compat√≠vel."
fi

log_info "üîç Verificando recursos de hardware b√°sicos..."
MIN_RAM_GB=4 # M√≠nimo recomendado de RAM em GB para um n√≥ Proxmox VE
RAM_AVAILABLE_GB=$(free -g | awk '/Mem:/ {print $2}')
if (( RAM_AVAILABLE_GB < MIN_RAM_GB )); then
    log_info "‚ö†Ô∏è **AVISO**: Pouca RAM detectada ($RAM_AVAILABLE_GB GB). M√≠nimo recomendado para Proxmox VE √© $MIN_RAM_GB GB. O desempenho pode ser afetado."
else
    log_info "‚úÖ RAM dispon√≠vel ($RAM_AVAILABLE_GB GB) OK."
fi
# Adicione mais checks aqui (CPU, disco, etc.) se desejar

# --- Fase 2: Configura√ß√£o de Tempo e NTP ---

log_info "‚è∞ Configurando fuso hor√°rio para **$TIMEZONE** e sincroniza√ß√£o NTP..."

# Adicionado: Verifica√ß√£o de conectividade NTP inicial
log_info "üîç Verificando conectividade com servidores NTP externos (pool.ntp.org:123/UDP)..."
if ! nc -zvu pool.ntp.org 123 &>/dev/null; then
    log_erro "Falha na conex√£o com pool.ntp.org na porta 123 (UDP). Verifique conectividade externa e regras de firewall para NTP."
else
    log_ok "‚úÖ Conectividade NTP externa OK."
fi

log_cmd "timedatectl set-timezone $TIMEZONE"
log_cmd "timedatectl set-ntp true" # Habilita o systemd-timesyncd
log_cmd "systemctl restart systemd-timesyncd" # Garante que o servi√ßo esteja rodando

log_info "Aguardando e verificando a sincroniza√ß√£o NTP inicial..."
timeout 15 bash -c 'while ! timedatectl status | grep -q "System clock synchronized: yes"; do sleep 1; done'
if [ $? -ne 0 ]; then
    log_info "‚ö†Ô∏è **AVISO**: Falha na sincroniza√ß√£o NTP ap√≥s 15 segundos! Tentando corre√ß√£o alternativa com ntpdate..."
    # Garante que ntpdate esteja instalado antes de us√°-lo
    command -v ntpdate &>/dev/null || log_cmd "apt install -y ntpdate"
    # Tenta sincronizar com ntpdate e registra qualquer erro, com m√∫ltiplos fallbacks
    ntpdate -s pool.ntp.org >> "$LOG_FILE" 2>&1 \
    || ntpdate -s 0.pool.ntp.org >> "$LOG_FILE" 2>&1 \
    || ntpdate -s 1.pool.ntp.org >> "$LOG_FILE" 2>&1 \
    || log_erro 'Falha grave ao sincronizar com ntpdate ap√≥s v√°rias tentativas. Verifique a conectividade de rede e as configura√ß√µes de NTP.'
else
    log_info "‚úÖ Sincroniza√ß√£o NTP bem-sucedida."
fi

# --- Fase 3: Gerenciamento de Reposit√≥rios e Atualiza√ß√µes ---

log_info "üóëÔ∏è Desabilitando reposit√≥rio de subscri√ß√£o e habilitando reposit√≥rio PVE no-subscription..."
# Fa√ßa backup de arquivos de lista de apt antes de modificar
backup_file "/etc/apt/sources.list.d/pve-enterprise.list"
backup_file "/etc/apt/sources.list"
backup_file "/etc/apt/sources.list.d/pve-no-subscription.list"

# CORRE√á√ÉO: Verifica se o arquivo existe antes de tentar modific√°-lo
if [ -f "/etc/apt/sources.list.d/pve-enterprise.list" ]; then
    log_info "Comentando a linha do pve-enterprise.list para desabilitar o reposit√≥rio de subscri√ß√£o."
    log_cmd "sed -i 's/^deb/#deb/' /etc/apt/sources.list.d/pve-enterprise.list"
else
    log_info "‚ÑπÔ∏è Arquivo /etc/apt/sources.list.d/pve-enterprise.list n√£o encontrado. Nenhuma a√ß√£o necess√°ria para desabilitar o reposit√≥rio de subscri√ß√£o."
fi


# Adiciona/sobrescreve os reposit√≥rios Debian padr√£o
log_cmd "echo 'deb http://ftp.debian.org/debian bookworm main contrib' > /etc/apt/sources.list"
log_cmd "echo 'deb http://ftp.debian.org/debian bookworm-updates main contrib' >> /etc/apt/sources.list"
log_cmd "echo 'deb http://security.debian.org/debian-security bookworm-security main contrib' >> /etc/apt/sources.list"
# Adiciona o reposit√≥rio Proxmox VE "no-subscription"
log_cmd "echo 'deb http://download.proxmox.com/debian/pve bookworm pve-no-subscription' > /etc/apt/sources.list.d/pve-no-subscription.list"

log_info "üîÑ Atualizando listas de pacotes e o sistema operacional..."
log_cmd "apt update"
log_cmd "apt dist-upgrade -y"   # Atualiza todos os pacotes e resolve depend√™ncias
log_cmd "apt autoremove -y"     # Remove pacotes √≥rf√£os
log_cmd "apt clean"             # Limpa o cache de pacotes

log_info "üßπ Removendo o aviso de assinatura Proxmox VE do WebUI (se n√£o possuir uma licen√ßa ativa)..."
# Cria um hook para APT que modifica o arquivo JS do WebUI
log_cmd "echo \"DPkg::Post-Invoke { \\\"dpkg -V proxmox-widget-toolkit | grep -q '/proxmoxlib.js$'; if [ \\\$? -eq 1 ]; then sed -i '/.*data.status.*{/{s/\\!//;s/active/NoMoreNagging/}' /usr/share/javascript/proxmox-widget-toolkit/proxmoxlib.js; fi\\\"; };\" > /etc/apt/apt.conf.d/no-nag-script"
# Reinstala o pacote para aplicar a modifica√ß√£o imediatamente (ou ap√≥s futuras atualiza√ß√µes do pacote)
log_cmd "apt --reinstall install -y proxmox-widget-toolkit"
log_info "‚úÖ Aviso de assinatura removido do WebUI (se aplic√°vel)."

# --- Fase 4: Hardening de Seguran√ßa (Opcional) ---

read -p "üîí Deseja aplicar hardening de seguran√ßa (desativar login de root por senha e password authentication)? [s/N] " -n 1 -r -t 10
echo # Nova linha ap√≥s a resposta
REPLY=${REPLY:-N}
if [[ $REPLY =~ ^[Ss]$ ]]; then
    log_info "üîí Aplicando hardening SSH..."
    backup_file "/etc/ssh/sshd_config"
    log_cmd "sed -i 's/^#\?PermitRootLogin.*/PermitRootLogin prohibit-password/' /etc/ssh/sshd_config"
    log_cmd "sed -i 's/^#\?PasswordAuthentication.*/PasswordAuthentication no/' /etc/ssh/sshd_config"
    log_cmd "systemctl restart sshd"
    log_info "‚úÖ Hardening aplicado! **Aten√ß√£o**: Agora, o acesso ao root via SSH s√≥ ser√° poss√≠vel usando chaves SSH. Certifique-se de t√™-las configuradas antes de fechar a sess√£o atual."
else
    log_info "‚ÑπÔ∏è Hardening SSH ignorado. O login por senha permanece ativo (menos seguro para produ√ß√£o)."
fi

# --- Fase 5: Instala√ß√£o de Pacotes Opcionais ---

install_optional_tools() {
    echo
    read -p "üì¶ Deseja instalar ferramentas adicionais √∫teis (ex: qemu-guest-agent, ifupdown2, git, htop, smartmontools)? [s/N] " -n 1 -r -t 10
    echo # Nova linha ap√≥s a resposta
    REPLY=${REPLY:-N}
    if [[ $REPLY =~ ^[Ss]$ ]]; then
        log_info "Instalando pacotes adicionais..."
        log_cmd "apt install -y qemu-guest-agent ifupdown2 git htop smartmontools"
        log_info "‚úÖ Pacotes adicionais instalados."
    else
        log_info "‚ÑπÔ∏è Instala√ß√£o de pacotes adicionais ignorada."
    fi
}
install_optional_tools

# --- Fase 6: Verifica√ß√µes P√≥s-Configura√ß√£o e Finaliza√ß√£o ---

log_info "üîç Verificando status de servi√ßos cr√≠ticos do Proxmox VE..."
if ! systemctl is-active corosync pve-cluster pvedaemon; then
    log_erro "Um ou mais servi√ßos cr√≠ticos do Proxmox (corosync, pve-cluster, pvedaemon) N√ÉO est√£o ativos. Verifique os logs e tente reiniciar manualmente."
    log_info "O script ser√° encerrado devido √† falha de servi√ßo cr√≠tico."
    exit 1
else
    log_ok "‚úÖ Todos os servi√ßos cr√≠ticos do Proxmox VE (corosync, pve-cluster, pvedaemon) est√£o ativos."
fi

log_info "üîó Realizando testes de conectividade essencial do cluster com n√≥s pares..."
for PEER_IP in "${CLUSTER_PEER_IPS[@]}"; do
    # Obt√©m o IP principal do pr√≥prio n√≥ para evitar testar a si mesmo
    # Adapta√ß√£o para obter o IP da interface que est√° na CLUSTER_NETWORK (√∫til se houver m√∫ltiplas interfaces)
    CURRENT_NODE_IP=$(ip -4 addr show dev $(ip r get $CLUSTER_NETWORK | awk '{print $3; exit}') 2>/dev/null | grep -oP 'inet \K[\d.]+')

    # Fallback se a interface principal da CLUSTER_NETWORK n√£o for encontrada, pega o primeiro IP
    if [ -z "$CURRENT_NODE_IP" ]; then
        CURRENT_NODE_IP=$(hostname -I | awk '{print $1}')
    fi

    if [ "$PEER_IP" = "$CURRENT_NODE_IP" ]; then
        continue # Pula o teste se o IP for o do pr√≥prio n√≥
    fi

    log_info "Testando conex√£o com o n√≥ $PEER_IP..."
    if nc -zv "$PEER_IP" 5404 &>/dev/null; then
        log_info "‚úÖ Conex√£o Corosync com $PEER_IP (porta 5404) OK."
    else
        log_erro "Conex√£o Corosync com $PEER_IP (porta 5404) falhou. Verifique as regras de firewall e a rede."
    fi
    if nc -zv "$PEER_IP" 2224 &>/dev/null; then
        log_info "‚úÖ Conex√£o pve-cluster com $PEER_IP (porta 2224) OK."
    else
        log_erro "Conex√£o pve-cluster com $PEER_IP (porta 2224) falhou. Verifique as regras de firewall e a rede."
    fi
    # Teste de ping para a nova regra ICMP (se o firewall estiver configurado)
    # ATEN√á√ÉO: Este ping pode falhar se o script de firewall n√£o tiver sido executado ainda.
    if ping -c 1 -W 1 "$PEER_IP" &>/dev/null; then
        log_info "‚úÖ Ping com $PEER_IP OK."
    else
        log_info "‚ö†Ô∏è **AVISO**: Ping com $PEER_IP falhou. Isso pode ser normal se o script de firewall ainda n√£o foi executado ou se as regras de ICMP n√£o foram aplicadas."
    fi
done

log_info "üåç Testando conex√£o externa (internet) via HTTPS..."
if nc -zv google.com 443 &>/dev/null; then
    log_info "‚úÖ Conex√£o externa via HTTPS (google.com:443) OK."
else
    log_info "‚ö†Ô∏è **AVISO**: Falha na conex√£o externa via HTTPS. Verifique a conectividade geral com a internet."
fi

log_info "üßº Limpando poss√≠veis res√≠duos de execu√ß√µes anteriores ou arquivos tempor√°rios..."
log_info "‚úÖ Limpeza de res√≠duos conclu√≠da."

log_info "üßπ Limpando logs de p√≥s-instala√ß√£o antigos (com mais de 15 dias) em /var/log/..."
log_cmd "find /var/log -name \"proxmox-postinstall-*.log\" -mtime +15 -exec rm {} \\;"
log_info "‚úÖ Limpeza de logs antigos conclu√≠da."

# C√°lculo do tempo total de execu√ß√£o
END_TIME=$(date +%s)
ELAPSED_TIME=$((END_TIME - START_TIME))

log_info "‚úÖ **FINALIZADO**: Configura√ß√£o inicial do n√≥ **$NODE_NAME** conclu√≠da em $(date)."
log_info "‚è≥ Tempo total de execu√ß√£o do script: **$ELAPSED_TIME segundos**."
log_info "üìã O log detalhado de todas as opera√ß√µes est√° dispon√≠vel em: **$LOG_FILE**."

# --- Resumo da Configura√ß√£o e Pr√≥ximos Passos ---

log_info "üìù **RESUMO DA CONFIGURA√á√ÉO E PR√ìXIMOS PASSOS PARA SEU HOMELAB**"
log_info "---------------------------------------------------------"
log_info "‚úîÔ∏è N√≥ configurado: **$NODE_NAME**"
log_info "‚úîÔ∏è Hardening SSH (desativa login root por senha): $(grep -q "PermitRootLogin prohibit-password" /etc/ssh/sshd_config && echo "Aplicado" || echo "N√£o aplicado")"
log_info "‚úîÔ∏è NTP sincronizado: $(timedatectl show --property=NTPSynchronized --value && echo "Sim" || echo "N√£o")" # Verifica se NTP est√° sincronizado
log_info "‚úîÔ∏è Reposit√≥rios atualizados: No-Subscription Proxmox VE e Debian Bookworm"
log_info "---------------------------------------------------------"
log_info "üîç **PR√ìXIMOS PASSO CRUCIAIS (MANUAIS)**:"
log_info "1.  **REINICIE O N√ì**: Algumas configura√ß√µes (especialmente de rede e SSH) s√≥ ter√£o efeito total ap√≥s o rein√≠cio. **Isso √© fundamental!**"
log_info "2.  **CRIE O CLUSTER (Primeiro N√≥)**: No WebUI do seu primeiro n√≥, v√° em **Datacenter > Cluster > Create Cluster**. Defina um nome para o cluster (ex: Aurora-Luna-Cluster)."
log_info "3.  **ADICIONE OUTROS N√ìS AO CLUSTER**: Nos demais n√≥s, no WebUI, v√° em **Datacenter > Cluster > Join Cluster**. Use as informa√ß√µes do primeiro n√≥ (token) para adicion√°-los."
log_info "4.  **CONFIGURE O FIREWALL**: Execute o script `proxmox-firewall-config.sh` (que ser√° criado a seguir) em cada n√≥ para configurar as regras de firewall. **Isso √© CR√çTICO para a seguran√ßa e funcionalidade da rede!**"
log_info "5.  **CONFIGURE STORAGES**: Ap√≥s o cluster estar funcional, configure seus storages (LVM-Thin, ZFS, NFS, Ceph, etc.) conforme sua necessidade para armazenar VMs/CTs e ISOs."
log_info "6.  **CRIE CHAVES SSH (se aplicou hardening)**: Se voc√™ aplicou o hardening SSH, configure suas chaves SSH para acesso root antes de fechar a sess√£o atual, para garantir acesso futuro."
log_info "---------------------------------------------------------"

# --- REIN√çCIO RECOMENDADO ---
echo
read -p "‚ü≥ **REIN√çCIO ALTAMENTE RECOMENDADO**: Para garantir que todas as configura√ß√µes sejam aplicadas, √© **fundamental** reiniciar o n√≥. Deseja reiniciar agora? [s/N] " -n 1 -r -t 15
echo # Adiciona uma nova linha ap√≥s a resposta do usu√°rio ou timeout

# Define 'N' como padr√£o se nada for digitado ou se houver timeout
REPLY=${REPLY:-N}

if [[ $REPLY =~ ^[Ss]$ ]]; then
    log_info "üîÑ Reiniciando o n√≥ **$NODE_NAME** agora..."
    log_cmd "reboot"
else
    log_info "‚ÑπÔ∏è Rein√≠cio adiado. Lembre-se de executar 'reboot' manualmente no n√≥ **$NODE_NAME** o mais r√°pido poss√≠vel para aplicar todas as mudan√ßas."
fi
