#!/bin/bash

# Script: diagnostico-proxmox.sh
# Autor: OpenAI + VIPs (refinado)
# Descri√ß√£o: Diagn√≥stico avan√ßado e cont√≠nuo do ambiente Proxmox VE
# Requisitos: smartmontools, iproute2, net-tools, curl, dig, ss, zfsutils-linux

#============================================================#
# CONFIGURA√á√ïES INICIAIS
#============================================================#
set -euo pipefail
DATA=$(date '+%Y-%m-%d_%H-%M-%S')
NOME=$(hostname)
LOGFILE="/tmp/diagnostico-proxmox_${NOME}_${DATA}.log"

exec > >(tee -a "$LOGFILE") 2>&1

echo "üîé Iniciando Diagn√≥stico Avan√ßado - $DATA - N√≥: $NOME"
echo "Arquivo de log: $LOGFILE"
echo "--------------------------------------------------------"

#============================================================#
# FUN√á√ïES AUXILIARES
#============================================================#
verificar_comando() {
  command -v "$1" >/dev/null || echo "‚ö†Ô∏è  Comando '$1' n√£o encontrado. Instale-o com: apt install -y $2"
}

#============================================================#
# 1. CONECTIVIDADE EXTERNA
#============================================================#
echo -e "\nüåê Testando conectividade com gateway e internet..."
ping -c 3 172.20.220.1 >/dev/null && echo "‚úÖ Gateway OK" || echo "‚ùå Gateway inacess√≠vel"
ping -c 3 8.8.8.8 >/dev/null && echo "‚úÖ Google DNS OK" || echo "‚ùå Sem acesso √† internet (IP)"

#============================================================#
# 2. RESOLU√á√ÉO DNS E PTR
#============================================================#
echo -e "\nüîé Verificando DNS e resolu√ß√£o reversa..."
verificar_comando dig dnsutils
HOSTIP=$(hostname -I | awk '{print $1}')
dig +short google.com >/dev/null && echo "‚úÖ DNS direto OK" || echo "‚ùå Falha DNS direto"
PTR=$(dig +short -x "$HOSTIP")
[[ -z "$PTR" ]] && echo "‚ö†Ô∏è  Sem PTR configurado para $HOSTIP" || echo "‚úÖ PTR OK: $PTR"

#============================================================#
# 3. INTERFACES, MTU E GATEWAY
#============================================================#
echo -e "\nüì° Verificando interfaces e rotas..."
verificar_comando ip iproute2
ip a
ip r

#============================================================#
# 4. FIREWALL E REGRAS
#============================================================#
echo -e "\nüõ°Ô∏è  Verificando regras de firewall ativas (iptables)..."
verificar_comando iptables iptables
verificar_comando ip6tables iptables
verificar_comando pve-firewall pve-firewall
iptables -S || echo "‚ùå iptables n√£o dispon√≠vel"
ip6tables -S || echo "‚ùå ip6tables n√£o dispon√≠vel"
pve-firewall compile >/dev/null && echo "‚úÖ Regras do Proxmox v√°lidas" || echo "‚ùå Erro de sintaxe nas regras do Proxmox"

#============================================================#
# 5. CONECTIVIDADE ENTRE N√ìS DO CLUSTER
#============================================================#
echo -e "\nüîÅ Verificando conectividade entre n√≥s do cluster..."
verificar_comando pvecm proxmox-cluster
NODES=$(pvecm nodes | awk '/^[ 0-9]/ {print $2}')
for NODE in $NODES; do
    printf "‚ÜîÔ∏è  %-15s : " "$NODE"
    ping -c 2 "$NODE" >/dev/null && echo "OK" || echo "‚ùå Falha"
    for PORT in 22 8006 5404 5405; do
        timeout 2 bash -c ": </dev/tcp/$NODE/$PORT" 2>/dev/null && echo "   ‚úÖ Porta $PORT aberta" || echo "   ‚ùå Porta $PORT bloqueada"
    done
    echo
done

#============================================================#
# 6. SERVI√áOS ESSENCIAIS DO PROXMOX
#============================================================#
echo -e "\n‚öôÔ∏è  Verificando servi√ßos do Proxmox..."
SERVICOS=(corosync pve-cluster pvedaemon pvestatd pveproxy)
for SVC in "${SERVICOS[@]}"; do
  systemctl is-active --quiet "$SVC" && echo "‚úÖ $SVC ativo" || echo "‚ùå $SVC inativo"
  systemctl status "$SVC" --no-pager | grep -E 'Active:|Loaded:|fail|error' || true
done

#============================================================#
# 7. DISCOS, SMART E ZFS
#============================================================#
echo -e "\nüíæ Verificando discos e ZFS..."
verificar_comando smartctl smartmontools
verificar_comando lsblk util-linux
lsblk -o NAME,SIZE,FSTYPE,MOUNTPOINT
for DISK in $(ls /dev/sd? /dev/nvme?n1 2>/dev/null); do
    echo "SMART: $DISK"; smartctl -H "$DISK" | grep -i result || echo "‚ö†Ô∏è  Falha ao ler SMART de $DISK"
done
verificar_comando zpool zfsutils-linux
zpool status || echo "‚ÑπÔ∏è  Nenhum pool ZFS detectado"

#============================================================#
# 8. USO DE MEM√ìRIA, CPU E CARGA
#============================================================#
echo -e "\nüìä Verificando uso de recursos..."
free -h
uptime

#============================================================#
# 9. LOGS RECENTES DO SISTEMA
#============================================================#
echo -e "\nü™µ Logs recentes com erros/avisos do journalctl:"
journalctl -p 3 -n 50 --no-pager || echo "‚ÑπÔ∏è  Nenhum log cr√≠tico recente encontrado."

echo -e "\nü™µ Logs do kernel (dmesg):"
dmesg --level=err,warn | tail -n 30 || echo "‚ÑπÔ∏è  Nenhum aviso cr√≠tico recente no kernel"

#============================================================#
# 10. SUGEST√ïES DE A√á√ÉO
#============================================================#
echo -e "\nüí° Sugest√µes baseadas nos resultados:"
[[ -z "$PTR" ]] && echo "‚û°Ô∏è  Configure PTR reverso para $HOSTIP (entrada DNS tipo PTR)"
echo "‚û°Ô∏è  Verifique bloqueios de porta no firewall entre n√≥s (5404/5405 UDP, 22/8006 TCP)"
echo "‚û°Ô∏è  Revise servi√ßos inativos com: systemctl restart <servi√ßo>"
echo "‚û°Ô∏è  Atualize pacotes se necess√°rio: apt update && apt full-upgrade"
echo "‚û°Ô∏è  Fa√ßa backup do log gerado: $LOGFILE"

echo -e "\n‚úÖ Diagn√≥stico finalizado √†s $(date '+%Y-%m-%d %H:%M:%S')"
