#!/usr/bin/env bash

# üöÄ Script P√≥s-Instala√ß√£o Proxmox VE 8 - Cluster Aurora/Luna (Vers√£o 10/10 - Foco no Essencial e Usabilidade)
# Este script DEVE SER EXECUTADO INDIVIDUALMENTE em cada n√≥ do cluster Proxmox.

# ‚úÖ Verifique ANTES de executar:
# 1. Voc√™ j√° criou o cluster via WebUI? (Datacenter > Cluster > Create)
# 2. Todos os n√≥s est√£o acess√≠veis via ping?
# 3. Tem backup dos dados importantes?

###### Commit + Push ##
#
# ‚úÖ Instru√ß√µes de uso local (alternativa ao m√©todo com 'curl'):
#
#    1. Transfira este script para o seu n√≥ Proxmox (via WebUI Shell, pendrive, scp, etc.).
#       Exemplo via SCP (executado do seu computador local):
#       scp /caminho/do/seu/script/post-install.sh root@IP_DO_PROXMOX:/root/post-install.sh
#
#    2. Torne o script execut√°vel no servidor Proxmox:
#       chmod +x /root/post-install.sh
#
#    3. Execute o script como usu√°rio root (no servidor Proxmox):
#       /root/post-install.sh
#       OU
#       bash /root/post-install.sh
#
######
#
# üîπ VLANs Utilizadas:
#    - 172.20.220.0/24 (Home Lab - Rede principal para comunica√ß√£o do cluster)
#    - 172.21.221.0/24 (Rede Interna - Gerenciamento)
#    - 172.25.125.0/24 (Wi-Fi Arkadia)

# üõ†Ô∏è Configura√ß√µes Essenciais - Podem ser sobrescritas por /etc/proxmox-postinstall.conf
CLUSTER_NETWORK="172.20.220.0/24" # Rede para comunica√ß√£o interna do cluster (Corosync, pve-cluster)
NODE_NAME=$(hostname)             # Nome do servidor atual
TIMEZONE="America/Sao_Paulo"     # Fuso hor√°rio do sistema

# IPs de outros n√≥s do cluster para testes de conectividade.
# Adicione TODOS os IPs dos seus n√≥s aqui. O script ignorar√° o IP do pr√≥prio n√≥ durante o teste.
# Exemplo: Se seus n√≥s s√£o 172.20.220.20 (Aurora) e 172.20.220.21 (Luna):
CLUSTER_PEER_IPS=("172.20.220.20" "172.20.220.21")

LOG_FILE="/var/log/proxmox-postinstall-$(date +%Y%m%d)-$(hostname).log" # Arquivo de log espec√≠fico por n√≥
LOCK_FILE="/etc/proxmox-postinstall.lock" # Garante que o script n√£o seja executado m√∫ltiplas vezes
START_TIME=$(date +%s)            # In√≠cio do registro de tempo de execu√ß√£o

# --- INSTRU√á√ïES DE EXECU√á√ÉO ---
#
# üìå **M√©todo Recomendado: Via WebUI (para cada n√≥)**:
#    1. Acesse o Proxmox WebUI em cada host (ex: Aurora: https://172.20.220.20:8006, Luna: https://172.20.220.21:8006).
#    2. V√° at√© a se√ß√£o "**Shell**" de cada n√≥.
#    3. Execute o comando: `curl -sL SEU_URL_DO_SCRIPT/post-install.sh | bash`
#       (Substitua `SEU_URL_DO_SCRIPT` pelo endere√ßo onde voc√™ hospedou este script.
#        Ex: `https://raw.githubusercontent.com/seuusuario/seurepositorio/main/post-install.sh`)
#
# üìå **M√©todo Alternativo: Via SSH (para cada n√≥)**:
#    1. Conecte-se via SSH a cada n√≥ individualmente (ex: `ssh root@172.20.220.20`, depois `ssh root@172.20.220.21`).
#    2. Execute o comando: `curl -sL SEU_URL_DO_SCRIPT/post-install.sh | bash`
#       (ATEN√á√ÉO: Se aplicar o "Hardening SSH" no final do script, o login de root por senha ser√° desabilitado. Voc√™ precisar√° de chaves SSH para futuros acessos ao root.)

# --- FUN√á√ïES AUXILIARES ---

# Fun√ß√µes de Log
log_info() { echo -e "\n‚ÑπÔ∏è $*" | tee -a "$LOG_FILE"; }
log_cmd() {
    echo -e "\nüîπ Executando Comando: $*" | tee -a "$LOG_FILE"
    eval "$@" >> "$LOG_FILE" 2>&1
    local status=$?
    if [ $status -ne 0 ]; then
        echo "‚ùå **ERRO CR√çTICO** [$status]: Falha ao executar o comando: $*" | tee -a "$LOG_FILE"
        echo "O script ser√° encerrado. Verifique o log em $LOG_FILE para mais detalhes." | tee -a "$LOG_FILE"
        exit $status
    fi
    return $status
}

# Fun√ß√£o para fazer backup de arquivos
backup_file() {
    local file="$1"
    if [ -f "$file" ]; then
        local backup_dir="/var/backups/proxmox-postinstall"
        mkdir -p "$backup_dir"
        local timestamp=$(date +%Y%m%d%H%M%S)
        local backup_path="$backup_dir/$(basename "$file").${timestamp}"
        log_info "üì¶ Fazendo backup de '$file' para '$backup_path'..."
        cp -p "$file" "$backup_path" >> "$LOG_FILE" 2>&1
        if [ $? -ne 0 ]; then
            log_info "‚ö†Ô∏è **AVISO**: Falha ao criar backup de '$file'. Continue com cautela."
        else
            log_info "‚úÖ Backup de '$file' criado com sucesso."
        fi
    else
        log_info "‚ÑπÔ∏è Arquivo '$file' n√£o encontrado, nenhum backup necess√°rio."
    fi
}

# Fun√ß√£o para validar IP
validate_ip() {
    local ip="$1"
    if ! [[ "$ip" =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
        log_info "‚ùå **ERRO**: IP '$ip' inv√°lido. Use formato 'XXX.XXX.XXX.XXX'."
        exit 1
    fi
}

# Fun√ß√£o para exibir ajuda
show_help() {
    echo "Uso: $0 [OP√á√ÉO]"
    echo "Script para p√≥s-instala√ß√£o e configura√ß√£o inicial de um n√≥ Proxmox VE 8."
    echo ""
    echo "Op√ß√µes:"
    echo "  -h, --help    Mostra esta mensagem de ajuda e sai."
    echo "  --skip-lock   Ignora a verifica√ß√£o de arquivo de lock, permitindo m√∫ltiplas execu√ß√µes (N√ÉO RECOMENDADO)."
    echo ""
    echo "Vari√°veis de configura√ß√£o podem ser definidas em /etc/proxmox-postinstall.conf"
    echo "Exemplo: CLUSTER_NETWORK=\"192.168.1.0/24\""
    echo "         CLUSTER_PEER_IPS=(\"192.168.1.10\" \"192.168.1.11\")"
    echo "         TIMEZONE=\"America/New_York\""
    exit 0
}

# --- PROCESSAMENTO DE OP√á√ïES E CARREGAMENTO DE CONFIGURA√á√ÉO EXTERNA ---

# Processa op√ß√µes de linha de comando
SKIP_LOCK=false
for arg in "$@"; do
    case "$arg" in
        -h|--help) show_help ;;
        --skip-lock) SKIP_LOCK=true ;;
        *) echo "‚ùå Op√ß√£o inv√°lida: $arg. Use -h ou --help para ver as op√ß√µes." >&2; exit 1 ;;
    esac
done

# Carrega configura√ß√µes de arquivo externo (se existir)
if [ -f "/etc/proxmox-postinstall.conf" ]; then
    log_info "‚öôÔ∏è Carregando configura√ß√µes de /etc/proxmox-postinstall.conf..."
    # Garante que as vari√°veis sejam carregadas para o shell atual
    source "/etc/proxmox-postinstall.conf"
    log_info "‚úÖ Configura√ß√µes carregadas."
else
    log_info "‚ÑπÔ∏è Arquivo de configura√ß√£o /etc/proxmox-postinstall.conf n√£o encontrado. Usando configura√ß√µes padr√£o do script."
fi

# --- IN√çCIO DA EXECU√á√ÉO DO SCRIPT ---

# üîí Preven√ß√£o de M√∫ltiplas Execu√ß√µes
if [ "$SKIP_LOCK" = false ] && [ -f "$LOCK_FILE" ]; then
    echo "‚ö†Ô∏è **ALERTA**: O script j√° foi executado anteriormente neste n√≥ ($NODE_NAME). Abortando para evitar configura√ß√µes duplicadas."
    echo "Se voc√™ realmente precisa re-executar, remova '$LOCK_FILE' ou use '--skip-lock' (N√ÉO RECOMENDADO)."
    exit 1
fi
touch "$LOCK_FILE" # Cria o arquivo de lock

log_info "üìÖ **IN√çCIO**: Execu√ß√£o do script de p√≥s-instala√ß√£o no n√≥ **$NODE_NAME** em $(date)"

---

### **Fase 1: Verifica√ß√µes Iniciais e Valida√ß√£o de Entrada**

log_info "üîç Verificando depend√™ncias essenciais do sistema (curl, ping, nc)..."
check_dependency() {
    local cmd="$1"
    if ! command -v "$cmd" &>/dev/null; then
        echo "‚ùå **ERRO CR√çTICO**: O comando '$cmd' n√£o foi encontrado. Por favor, instale-o (ex: apt install -y $cmd) e re-execute o script." | tee -a "$LOG_FILE"
        exit 1
    fi
    log_info "‚úÖ Depend√™ncia '$cmd' verificada."
}
check_dependency "curl"
check_dependency "ping"
check_dependency "nc" # Netcat, usado para os testes de porta (apt install -y netcat-traditional ou netcat-openbsd)

log_info "üîç Validando formato dos IPs e m√°scara de rede..."
# Validar cada IP do cluster
for ip in "${CLUSTER_PEER_IPS[@]}"; do
    validate_ip "$ip"
done
log_info "‚úÖ Formato dos IPs em CLUSTER_PEER_IPS verificado."

# Validar formato da rede (ex: 172.20.220.0/24)
if ! [[ "$CLUSTER_NETWORK" =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}/[0-9]{1,2}$ ]]; then
    log_info "‚ùå **ERRO**: Formato de rede inv√°lido em CLUSTER_NETWORK. Use 'IP/MASK' (ex: 172.20.220.0/24)."
    exit 1
fi
log_info "‚úÖ Formato de CLUSTER_NETWORK verificado."

log_info "üîç Verificando conectividade de rede com os reposit√≥rios Debian..."
ping -c 4 ftp.debian.org &>/dev/null
if [ $? -ne 0 ]; then
    log_info "‚ö†Ô∏è **AVISO**: N√£o foi poss√≠vel pingar 'ftp.debian.org'. A conectividade com a internet pode estar comprometida. As atualiza√ß√µes e instala√ß√µes podem falhar."
else
    log_info "‚úÖ Conectividade com reposit√≥rios Debian OK."
fi

log_info "üîç Verificando a vers√£o do Proxmox VE..."
PVE_VERSION=$(pveversion | grep -oP 'pve-manager/\K\d+\.\d+') # Extrai "8.x"
REQUIRED_MAJOR_VERSION=8

if (( $(echo "$PVE_VERSION" | cut -d'.' -f1) < $REQUIRED_MAJOR_VERSION )); then
    echo "‚ùå **ERRO**: Este script requer Proxmox VE vers√£o $REQUIRED_MAJOR_VERSION.x ou superior. Vers√£o atual detectada: $PVE_VERSION. N√£o √© compat√≠vel." | tee -a "$LOG_FILE"
    exit 1
elif (( $(echo "$PVE_VERSION" | cut -d'.' -f1) > $REQUIRED_MAJOR_VERSION )); then
    log_info "‚ö†Ô∏è **AVISO**: Este script foi testado para Proxmox VE $REQUIRED_MAJOR_VERSION.x. Vers√£o $PVE_VERSION pode requerer ajustes ou n√£o ser totalmente compat√≠vel."
    read -p "Continuar mesmo assim? [s/N] " -n 1 -r -t 10
    echo # Nova linha ap√≥s a resposta do usu√°rio
    REPLY=${REPLY:-N}
    [[ ! $REPLY =~ ^[Ss]$ ]] && { log_info "Script abortado pelo usu√°rio."; exit 0; }
else
    log_info "‚úÖ Vers√£o do Proxmox VE ($PVE_VERSION) compat√≠vel."
fi

log_info "üîç Verificando recursos de hardware b√°sicos..."
MIN_RAM_GB=4 # M√≠nimo recomendado de RAM em GB para um n√≥ Proxmox VE
RAM_AVAILABLE_GB=$(free -g | awk '/Mem:/ {print $2}')
if (( RAM_AVAILABLE_GB < MIN_RAM_GB )); then
    log_info "‚ö†Ô∏è **AVISO**: Pouca RAM detectada ($RAM_AVAILABLE_GB GB). M√≠nimo recomendado para Proxmox VE √© $MIN_RAM_GB GB. O desempenho pode ser afetado."
else
    log_info "‚úÖ RAM dispon√≠vel ($RAM_AVAILABLE_GB GB) OK."
fi
# Adicione mais checks aqui (CPU, disco, etc.) se desejar

---

### **Fase 2: Configura√ß√£o de Tempo e NTP**

log_info "‚è∞ Configurando fuso hor√°rio para **$TIMEZONE** e sincroniza√ß√£o NTP..."
log_cmd "timedatectl set-timezone $TIMEZONE"
log_cmd "timedatectl set-ntp true" # Habilita o systemd-timesyncd
log_cmd "systemctl restart systemd-timesyncd" # Garante que o servi√ßo esteja rodando

log_info "Aguardando e verificando a sincroniza√ß√£o NTP inicial..."
timeout 15 bash -c 'while ! timedatectl status | grep -q "System clock synchronized: yes"; do sleep 1; done'
if [ $? -ne 0 ]; then
    echo "‚ö†Ô∏è **AVISO**: Falha na sincroniza√ß√£o NTP ap√≥s 15 segundos! Tentando corre√ß√£o alternativa com ntpdate..." | tee -a "$LOG_FILE"
    # Garante que ntpdate esteja instalado antes de us√°-lo
    command -v ntpdate &>/dev/null || log_cmd "apt install -y ntpdate"
    # Tenta sincronizar com ntpdate e registra qualquer erro, com m√∫ltiplos fallbacks
    ntpdate -s pool.ntp.org >> "$LOG_FILE" 2>&1 \
    || ntpdate -s 0.pool.ntp.org >> "$LOG_FILE" 2>&1 \
    || ntpdate -s 1.pool.ntp.org >> "$LOG_FILE" 2>&1 \
    || log_info '‚ùå **ERRO**: Falha grave ao sincronizar com ntpdate ap√≥s v√°rias tentativas. Verifique a conectividade de rede e as configura√ß√µes de NTP.'
else
    log_info "‚úÖ Sincroniza√ß√£o NTP bem-sucedida."
fi

---

### **Fase 3: Gerenciamento de Reposit√≥rios e Atualiza√ß√µes**

log_info "üóëÔ∏è Desabilitando reposit√≥rio de subscri√ß√£o e habilitando reposit√≥rio PVE no-subscription..."
# Fa√ßa backup de arquivos de lista de apt antes de modificar
backup_file "/etc/apt/sources.list.d/pve-enterprise.list"
backup_file "/etc/apt/sources.list"
backup_file "/etc/apt/sources.list.d/pve-no-subscription.list"

# Comenta a linha do pve-enterprise.list
log_cmd "sed -i 's/^deb/#deb/' /etc/apt/sources.list.d/pve-enterprise.list"
# Adiciona/sobrescreve os reposit√≥rios Debian padr√£o
log_cmd "echo 'deb http://ftp.debian.org/debian bookworm main contrib' > /etc/apt/sources.list"
log_cmd "echo 'deb http://ftp.debian.org/debian bookworm-updates main contrib' >> /etc/apt/sources.list"
log_cmd "echo 'deb http://security.debian.org/debian-security bookworm-security main contrib' >> /etc/apt/sources.list"
# Adiciona o reposit√≥rio Proxmox VE "no-subscription"
log_cmd "echo 'deb http://download.proxmox.com/debian/pve bookworm pve-no-subscription' > /etc/apt/sources.list.d/pve-no-subscription.list"

log_info "üîÑ Atualizando listas de pacotes e o sistema operacional..."
log_cmd "apt update"
log_cmd "apt dist-upgrade -y"   # Atualiza todos os pacotes e resolve depend√™ncias
log_cmd "apt autoremove -y"     # Remove pacotes √≥rf√£os
log_cmd "apt clean"             # Limpa o cache de pacotes

log_info "üßπ Removendo o aviso de assinatura Proxmox VE do WebUI (se n√£o possuir uma licen√ßa ativa)..."
# Cria um hook para APT que modifica o arquivo JS do WebUI
log_cmd "echo \"DPkg::Post-Invoke { \\\"dpkg -V proxmox-widget-toolkit | grep -q '/proxmoxlib.js$'; if [ \\\$? -eq 1 ]; then sed -i '/.*data.status.*{/{s/\\!//;s/active/NoMoreNagging/}' /usr/share/javascript/proxmox-widget-toolkit/proxmoxlib.js; fi\\\"; };\" > /etc/apt/apt.conf.d/no-nag-script"
# Reinstala o pacote para aplicar a modifica√ß√£o imediatamente (ou ap√≥s futuras atualiza√ß√µes do pacote)
log_cmd "apt --reinstall install -y proxmox-widget-toolkit"
log_info "‚úÖ Aviso de assinatura removido do WebUI (se aplic√°vel)."

---

### **Fase 4: Configura√ß√£o de Firewall**

log_info "üîç Verificando portas cr√≠ticas em uso antes de configurar o firewall..."
# Lista de portas essenciais para Proxmox e cluster
CRITICAL_PORTS="8006 22 5404 5405 2224"
for port in $CRITICAL_PORTS; do
    if ss -tuln | grep -q ":$port "; then
        log_info "‚ö†Ô∏è **AVISO**: Porta TCP/UDP **$port** j√° est√° em uso! Verifique se isso n√£o conflitar√° com as regras do firewall Proxmox. Se estiver em uso pelo Proxmox ou Corosync, isso √© normal."
    fi
done
log_info "‚úÖ Verifica√ß√£o de portas conclu√≠da."

log_info "üõ°Ô∏è Configurando o firewall do Proxmox VE com regras espec√≠ficas..."
log_cmd "pve-firewall stop"         # Parar o firewall para aplicar novas regras
log_cmd "pve-firewall rules --clean" # Limpa todas as regras existentes

# Regras para permitir acesso ao WebUI (porta 8006) e SSH (porta 22) apenas das redes locais
log_info "Permitindo acesso ao WebUI (8006) e SSH (22) apenas das redes locais..."
log_cmd "pve-firewall rule --add 172.20.220.0/24 --proto tcp --dport 8006 --accept --comment 'Acesso WebUI Home Lab'"
log_cmd "pve-firewall rule --add 172.21.221.0/24 --proto tcp --dport 8006 --accept --comment 'Acesso WebUI Rede Interna'"
log_cmd "pve-firewall rule --add 172.25.125.0/24 --proto tcp --dport 8006 --accept --comment 'Acesso WebUI Wi-Fi Arkadia'"
log_cmd "pve-firewall rule --add 172.20.220.0/24 --proto tcp --dport 22 --accept --comment 'Acesso SSH Home Lab'"
log_cmd "pve-firewall rule --add 172.21.221.0/24 --proto tcp --dport 22 --accept --comment 'Acesso SSH Rede Interna'"
log_cmd "pve-firewall rule --add 172.25.125.0/24 --proto tcp --dport 22 --accept --comment 'Acesso SSH Wi-Fi Arkadia'"

# Definindo redes locais para serem consideradas seguras pelo firewall (√∫til para VMs com 'firewall=1')
log_info "Configurando 'localnet' para as VLANs internas..."
log_cmd "pve-firewall localnet --add 172.20.220.0/24 --comment 'Home Lab VLAN (comunica√ß√£o cluster)'"
log_cmd "pve-firewall localnet --add 172.21.221.0/24 --comment 'Rede Interna Gerenciamento'"
log_cmd "pve-firewall localnet --add 172.25.125.0/24 --comment 'Wi-Fi Arkadia'"

# **CR√çTICO**: Regras para comunica√ß√£o INTERNA DO CLUSTER (Corosync e pve-cluster)
# Essas regras s√£o ABSOLUTAMENTE ESSENCIAIS para que os n√≥s do cluster se comuniquem e funcionem corretamente.
log_info "Permitindo tr√°fego essencial para comunica√ß√£o do cluster (Corosync, pve-cluster) na rede **$CLUSTER_NETWORK**..."
log_cmd "pve-firewall rule --add $CLUSTER_NETWORK --proto udp --dport 5404:5405 --accept --comment 'Corosync entre n√≥s do cluster'"
log_cmd "pve-firewall rule --add $CLUSTER_NETWORK --proto tcp --dport 2224 --accept --comment 'pve-cluster entre n√≥s do cluster'"

# Permitir tr√°fego ICMP (ping) entre os n√≥s do cluster para facilitar diagn√≥sticos
log_info "Permitindo tr√°fego ICMP (ping) na rede do cluster para facilitar diagn√≥sticos futuros..."
log_cmd "pve-firewall rule --add $CLUSTER_NETWORK --proto icmp --accept --comment 'Permitir ping entre os n√≥s do cluster'"

# Regra para permitir tr√°fego de SA√çDA para NTP (servidores externos)
log_info "Permitindo tr√°fego de sa√≠da para servidores NTP (porta UDP 123)..."
log_cmd "pve-firewall rule --action ACCEPT --direction OUT --proto udp --dport 123 --comment 'Permitir sa√≠da para NTP'"

# Regra final: Bloquear todo o tr√°fego n√£o explicitamente permitido (default deny)
log_info "Aplicando regra de bloqueio padr√£o para todo o tr√°fego n√£o autorizado..."
log_cmd "pve-firewall rule --add 0.0.0.0/0 --drop --comment 'Bloquear tr√°fego n√£o autorizado por padr√£o'"

log_info "Ativando e iniciando o servi√ßo de firewall do Proxmox VE..."
log_cmd "pve-firewall enable"
log_cmd "pve-firewall start"

---

### **Fase 5: Hardening de Seguran√ßa (Opcional)**

read -p "üîí Deseja aplicar hardening de seguran√ßa (desativar login de root por senha e password authentication)? [s/N] " -n 1 -r -t 10
echo # Nova linha ap√≥s a resposta
REPLY=${REPLY:-N}
if [[ $REPLY =~ ^[Ss]$ ]]; then
    log_info "üîí Aplicando hardening SSH..."
    backup_file "/etc/ssh/sshd_config"
    log_cmd "sed -i 's/^#\?PermitRootLogin.*/PermitRootLogin prohibit-password/' /etc/ssh/sshd_config"
    log_cmd "sed -i 's/^#\?PasswordAuthentication.*/PasswordAuthentication no/' /etc/ssh/sshd_config"
    log_cmd "systemctl restart sshd"
    log_info "‚úÖ Hardening aplicado! **Aten√ß√£o**: Agora, o acesso ao root via SSH s√≥ ser√° poss√≠vel usando chaves SSH. Certifique-se de t√™-las configuradas antes de fechar a sess√£o atual."
else
    log_info "‚ÑπÔ∏è Hardening SSH ignorado. O login por senha permanece ativo (menos seguro para produ√ß√£o)."
fi

---

### **Fase 6: Instala√ß√£o de Pacotes Opcionais**

install_optional_tools() {
    echo
    read -p "üì¶ Deseja instalar ferramentas adicionais √∫teis (ex: qemu-guest-agent, ifupdown2, git, htop, smartmontools)? [s/N] " -n 1 -r -t 10
    echo # Nova linha ap√≥s a resposta
    REPLY=${REPLY:-N}
    if [[ $REPLY =~ ^[Ss]$ ]]; then
        log_info "Instalando pacotes adicionais..."
        log_cmd "apt install -y qemu-guest-agent ifupdown2 git htop smartmontools"
        log_info "‚úÖ Pacotes adicionais instalados."
    else
        log_info "‚ÑπÔ∏è Instala√ß√£o de pacotes adicionais ignorada."
    fi
}
install_optional_tools

---

### **Fase 7: Verifica√ß√µes P√≥s-Configura√ß√£o e Finaliza√ß√£o**

log_info "üîó Realizando testes de conectividade essencial do cluster com n√≥s pares..."
for PEER_IP in "${CLUSTER_PEER_IPS[@]}"; do
    # Obt√©m o IP principal do pr√≥prio n√≥ para evitar testar a si mesmo
    # Adapta√ß√£o para obter o IP da interface que est√° na CLUSTER_NETWORK (√∫til se houver m√∫ltiplas interfaces)
    CURRENT_NODE_IP=$(ip -4 addr show dev $(ip r get $CLUSTER_NETWORK | awk '{print $3; exit}') 2>/dev/null | grep -oP 'inet \K[\d.]+')

    # Fallback se a interface principal da CLUSTER_NETWORK n√£o for encontrada, pega o primeiro IP
    if [ -z "$CURRENT_NODE_IP" ]; then
        CURRENT_NODE_IP=$(hostname -I | awk '{print $1}')
    fi

    if [ "$PEER_IP" = "$CURRENT_NODE_IP" ]; then
        continue # Pula o teste se o IP for o do pr√≥prio n√≥
    fi

    log_info "Testando conex√£o com o n√≥ $PEER_IP..."
    if nc -zv "$PEER_IP" 5404 &>/dev/null; then
        log_info "‚úÖ Conex√£o Corosync com $PEER_IP (porta 5404) OK."
    else
        log_info "‚ùå **FALHA**: Conex√£o Corosync com $PEER_IP (porta 5404) falhou. Verifique as regras de firewall e a rede."
    fi
    if nc -zv "$PEER_IP" 2224 &>/dev/null; then
        log_info "‚úÖ Conex√£o pve-cluster com $PEER_IP (porta 2224) OK."
    else
        log_info "‚ùå **FALHA**: Conex√£o pve-cluster com $PEER_IP (porta 2224) falhou. Verifique as regras de firewall e a rede."
    fi
    # Teste de ping para a nova regra ICMP
    if ping -c 1 -W 1 "$PEER_IP" &>/dev/null; then
        log_info "‚úÖ Ping com $PEER_IP OK."
    else
        log_info "‚ùå **FALHA**: Ping com $PEER_IP falhou. Verifique as regras de firewall (ICMP) e a conectividade de rede."
    fi
done

log_info "üåç Testando conex√£o externa (internet) via HTTPS..."
if nc -zv google.com 443 &>/dev/null; then
    log_info "‚úÖ Conex√£o externa via HTTPS (google.com:443) OK."
else
    log_info "‚ö†Ô∏è **AVISO**: Falha na conex√£o externa via HTTPS. Verifique as regras de sa√≠da do firewall e a conectividade geral com a internet."
fi

log_info "üßº Limpando poss√≠veis res√≠duos de execu√ß√µes anteriores ou arquivos tempor√°rios..."
# Exemplo de remo√ß√£o do hook de "no-nag-script" se ele n√£o for mais desejado como permanente
# MANTENDO o hook, ele se auto-corrige. Se voc√™ quiser remover o hook completamente ap√≥s a primeira execu√ß√£o:
# log_cmd "rm -f /etc/apt/apt.conf.d/no-nag-script"
log_info "‚úÖ Limpeza de res√≠duos conclu√≠da."

log_info "üßπ Limpando logs de p√≥s-instala√ß√£o antigos (com mais de 15 dias) em /var/log/..."
# Encontra e remove logs mais antigos que 15 dias
log_cmd "find /var/log -name \"proxmox-postinstall-*.log\" -mtime +15 -exec rm {} \\;"
log_info "‚úÖ Limpeza de logs antigos conclu√≠da."

# C√°lculo do tempo total de execu√ß√£o
END_TIME=$(date +%s)
ELAPSED_TIME=$((END_TIME - START_TIME))

log_info "‚úÖ **FINALIZADO**: Configura√ß√£o conclu√≠da com sucesso no n√≥ **$NODE_NAME** em $(date)."
log_info "‚è≥ Tempo total de execu√ß√£o do script: **$ELAPSED_TIME segundos**."
log_info "üìã O log detalhado de todas as opera√ß√µes est√° dispon√≠vel em: **$LOG_FILE**."

---

### **Resumo da Configura√ß√£o e Pr√≥ximos Passos**

log_info "üìù **RESUMO DA CONFIGURA√á√ÉO E PR√ìXIMOS PASSOS PARA SEU HOMELAB**"
log_info "---------------------------------------------------------"
log_info "‚úîÔ∏è N√≥ configurado: **$NODE_NAME**"
log_info "‚úîÔ∏è Firewall Proxmox VE ativo com regras para:"
log_info "    - Acesso ao WebUI (porta 8006) das redes internas"
log_info "    - Acesso SSH (porta 22) das redes internas"
log_info "    - Comunica√ß√£o interna do cluster (Corosync: 5404-5405, pve-cluster: 2224) na rede '$CLUSTER_NETWORK'"
log_info "    - Ping (ICMP) entre os n√≥s do cluster"
log_info "    - Acesso de sa√≠da para NTP e Internet (HTTPS)"
log_info "‚úîÔ∏è Hardening SSH (desativa login root por senha): $(grep -q "PermitRootLogin prohibit-password" /etc/ssh/sshd_config && echo "Aplicado" || echo "N√£o aplicado")"
log_info "‚úîÔ∏è NTP sincronizado: $(timedatectl show --property=NTPSynchronized --value && echo "Sim" || echo "N√£o")" # Verifica se NTP est√° sincronizado
log_info "‚úîÔ∏è Reposit√≥rios atualizados: No-Subscription Proxmox VE e Debian Bookworm"
log_info "---------------------------------------------------------"
log_info "üîç **PR√ìXIMOS PASSOS CRUCIAIS (MANUAIS)**:"
log_info "1.  **REINICIE O N√ì**: Algumas configura√ß√µes (especialmente de rede e SSH) s√≥ ter√£o efeito total ap√≥s o rein√≠cio. **Isso √© fundamental!**"
log_info "2.  **CRIE O CLUSTER (Primeiro N√≥)**: No WebUI do seu primeiro n√≥, v√° em **Datacenter > Cluster > Create Cluster**. Defina um nome para o cluster (ex: Aurora-Luna-Cluster)."
log_info "3.  **ADICIONE OUTROS N√ìS AO CLUSTER**: Nos demais n√≥s, no WebUI, v√° em **Datacenter > Cluster > Join Cluster**. Use as informa√ß√µes do primeiro n√≥ (token) para adicion√°-los."
log_info "4.  **CONFIGURE STORAGES**: Ap√≥s o cluster estar funcional, configure seus storages (LVM-Thin, ZFS, NFS, Ceph, etc.) conforme sua necessidade para armazenar VMs/CTs e ISOs."
log_info "5.  **CRIE CHAVES SSH (se aplicou hardening)**: Se voc√™ aplicou o hardening SSH, configure suas chaves SSH para acesso root antes de fechar a sess√£o atual, para garantir acesso futuro."
log_info "---------------------------------------------------------"

# --- REIN√çCIO RECOMENDADO ---
echo
read -p "‚ü≥ **REIN√çCIO ALTAMENTE RECOMENDADO**: Para garantir que todas as configura√ß√µes sejam aplicadas, √© **fundamental** reiniciar o n√≥. Deseja reiniciar agora? [s/N] " -n 1 -r -t 15
echo # Adiciona uma nova linha ap√≥s a resposta do usu√°rio ou timeout

# Define 'N' como padr√£o se nada for digitado ou se houver timeout
REPLY=${REPLY:-N}

if [[ $REPLY =~ ^[Ss]$ ]]; then
    log_info "üîÑ Reiniciando o n√≥ **$NODE_NAME** agora..."
    log_cmd "reboot"
else
    log_info "‚ÑπÔ∏è Rein√≠cio adiado. Lembre-se de executar 'reboot' manualmente no n√≥ **$NODE_NAME** o mais r√°pido poss√≠vel para aplicar todas as mudan√ßas."
fi
